import { useState, useEffect } from "react";
import { motion } from "framer-motion";
import { useLanguage } from "@/context/LanguageContext";
import { Bug, Shield, AlertTriangle, FileText, Database, Terminal, Activity, Zap, Upload, Download } from "lucide-react";
import BackButton from "@/components/ui/back-button";

const MalwareAnalysisPage = () => {
  const { language } = useLanguage();
  const [matrixChars, setMatrixChars] = useState<string[]>([]);

  useEffect(() => {
    const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=[]{}|;:,.<>?".split("");
    setMatrixChars(chars);
  }, []);

  const analysisModules = [
    {
      title: "Static Analysis",
      description: "Analyze file structure and properties without execution",
      icon: <FileText className="w-8 h-8" />,
      color: "from-red-500 to-orange-600",
      features: ["PE Analysis", "Strings Extraction", "Hash Computing", "Metadata Analysis"]
    },
    {
      title: "Dynamic Analysis",
      description: "Monitor malware behavior in controlled environment",
      icon: <Activity className="w-8 h-8" />,
      color: "from-orange-500 to-yellow-500",
      features: ["Process Monitoring", "Network Traffic", "File System Changes", "Registry Modifications"]
    },
    {
      title: "Behavioral Analysis",
      description: "Advanced behavior detection and classification",
      icon: <Shield className="w-8 h-8" />,
      color: "from-yellow-500 to-red-500",
      features: ["API Hooking", "Injection Detection", "Evasion Techniques", "Persistence Mechanisms"]
    },
    {
      title: "Threat Intelligence",
      description: "Compare samples against known threat databases",
      icon: <Database className="w-8 h-8" />,
      color: "from-red-500 to-pink-500",
      features: ["IOC Extraction", "YARA Rules", "Signature Matching", "Family Classification"]
    }
  ];

  const recentAnalyses = [
    { id: 1, filename: "suspicious.exe", type: "PE32", status: "Malicious", score: 95, timestamp: "10 minutes ago" },
    { id: 2, filename: "document.pdf", type: "PDF", status: "Clean", score: 15, timestamp: "25 minutes ago" },
    { id: 3, filename: "payload.dll", type: "DLL", status: "Suspicious", score: 72, timestamp: "1 hour ago" },
    { id: 4, filename: "script.js", type: "JavaScript", status: "Malicious", score: 88, timestamp: "2 hours ago" }
  ];

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'Malicious': return 'bg-red-500/20 text-red-400 border-red-500/50';
      case 'Suspicious': return 'bg-orange-500/20 text-orange-400 border-orange-500/50';
      case 'Clean': return 'bg-green-500/20 text-green-400 border-green-500/50';
      default: return 'bg-gray-500/20 text-gray-400 border-gray-500/50';
    }
  };

  const getScoreColor = (score: number) => {
    if (score >= 80) return 'text-red-400';
    if (score >= 50) return 'text-orange-400';
    if (score >= 20) return 'text-yellow-400';
    return 'text-green-400';
  };

  return (
    <div className="min-h-screen bg-white dark:bg-black text-black dark:text-white relative overflow-hidden">
      {/* Background Effects */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none opacity-10">
        {[...Array(6)].map((_, i) => (
          <motion.div
            key={i}
            className="absolute text-red-400 font-mono text-xs select-none"
            style={{
              left: `${Math.random() * 100}%`,
              top: `-5%`,
            }}
            animate={{
              y: ["0vh", "100vh"],
            }}
            transition={{
              duration: Math.random() * 7 + 9,
              repeat: Infinity,
              delay: Math.random() * 3,
              ease: "linear"
            }}
          >
            {matrixChars.slice(0, 8).map((_, idx) => (
              <div key={idx} className="mb-1">
                {matrixChars[Math.floor(Math.random() * matrixChars.length)]}
              </div>
            ))}
          </motion.div>
        ))}
      </div>

      <div className="relative z-10 p-8">
        {/* Back Button */}
        <BackButton color="red" />
        
        {/* Header */}
        <motion.div
          className="mb-8"
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8 }}
        >
          <div className="flex items-center space-x-4 mb-6">
            <motion.div
              className="p-4 rounded-xl bg-gradient-to-r from-red-600 to-orange-700"
              animate={{
                boxShadow: [
                  "0 0 20px rgba(239, 68, 68, 0.3)",
                  "0 0 40px rgba(239, 68, 68, 0.6)",
                  "0 0 20px rgba(239, 68, 68, 0.3)"
                ]
              }}
              transition={{ duration: 2, repeat: Infinity }}
            >
              <Bug className="w-12 h-12 text-white" />
            </motion.div>
            <div>
              <h1 className="text-4xl font-black text-transparent bg-clip-text bg-gradient-to-r from-red-400 to-orange-500">
                MALWARE ANALYSIS
              </h1>
              <p className="text-gray-400 font-mono text-lg">
                Advanced Threat Detection & File Analysis Platform
              </p>
            </div>
          </div>

          {/* Status Bar */}
          <motion.div
            className="flex items-center space-x-6 p-4 rounded-xl bg-gradient-to-r from-gray-900/50 to-black/50 border border-red-500/30"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 1, delay: 0.3 }}
          >
            {[
              { icon: Activity, label: "SANDBOX", status: "OPERATIONAL", color: "text-red-400" },
              { icon: Database, label: "SIGNATURES", status: "UPDATED", color: "text-orange-400" },
              { icon: Shield, label: "QUARANTINE", status: "SECURE", color: "text-yellow-400" }
            ].map((stat, idx) => (
              <motion.div
                key={idx}
                className="flex items-center space-x-2"
                animate={{
                  opacity: [0.7, 1, 0.7],
                }}
                transition={{
                  duration: 2,
                  delay: idx * 0.5,
                  repeat: Infinity,
                }}
              >
                <stat.icon className={`w-4 h-4 ${stat.color}`} />
                <span className="text-sm font-mono text-gray-400">{stat.label}:</span>
                <span className={`text-sm font-mono ${stat.color}`}>{stat.status}</span>
              </motion.div>
            ))}
          </motion.div>
        </motion.div>

        {/* File Upload Section */}
        <motion.div
          className="mb-8 p-6 rounded-2xl bg-gradient-to-br from-gray-900/60 to-black/80 border-2 border-dashed border-red-500/30 backdrop-blur-sm"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 1, delay: 0.4 }}
          whileHover={{ borderColor: "rgba(239, 68, 68, 0.5)" }}
        >
          <div className="text-center">
            <motion.div
              className="mb-4"
              animate={{
                y: [0, -10, 0],
              }}
              transition={{
                duration: 2,
                repeat: Infinity,
              }}
            >
              <Upload className="w-16 h-16 text-red-400 mx-auto" />
            </motion.div>
            <h3 className="text-xl font-bold text-white mb-2">Upload File for Analysis</h3>
            <p className="text-gray-400 mb-4">Drop your suspicious files here or click to browse</p>
            <motion.button
              className="px-8 py-3 bg-gradient-to-r from-red-600 to-orange-600 text-white font-mono rounded-lg hover:from-red-500 hover:to-orange-500 transition-colors"
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              SELECT FILES
            </motion.button>
          </div>
        </motion.div>

        {/* Analysis Modules Grid */}
        <motion.div
          className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 1, delay: 0.5 }}
        >
          {analysisModules.map((module, index) => (
            <motion.div
              key={index}
              className="relative p-6 rounded-2xl bg-gradient-to-br from-gray-900/60 to-black/80 border border-gray-700/50 backdrop-blur-sm"
              whileHover={{ 
                scale: 1.05,
                borderColor: "rgba(239, 68, 68, 0.5)",
                boxShadow: "0 10px 30px rgba(239, 68, 68, 0.2)"
              }}
              transition={{ duration: 0.3 }}
              initial={{ opacity: 0, y: 50 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6, delay: index * 0.1 }}
            >
              <motion.div 
                className={`mb-4 p-3 rounded-xl bg-gradient-to-r ${module.color} inline-block`}
                whileHover={{ scale: 1.1, rotate: 5 }}
                transition={{ duration: 0.3 }}
              >
                {module.icon}
              </motion.div>
              
              <h3 className="text-xl font-bold text-white mb-2">{module.title}</h3>
              <p className="text-gray-400 text-sm mb-4">{module.description}</p>
              
              <div className="space-y-1">
                {module.features.map((feature, idx) => (
                  <div key={idx} className="flex items-center space-x-2">
                    <div className="w-1 h-1 bg-red-400 rounded-full"></div>
                    <span className="text-xs text-gray-300">{feature}</span>
                  </div>
                ))}
              </div>

              <motion.button
                className="mt-4 w-full py-2 bg-gradient-to-r from-red-600/20 to-orange-600/20 border border-red-500/50 rounded-lg text-red-400 font-mono text-sm hover:bg-red-600/30 transition-colors"
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
              >
                CONFIGURE MODULE
              </motion.button>
            </motion.div>
          ))}
        </motion.div>

        {/* Recent Analyses */}
        <motion.div
          className="bg-gradient-to-br from-gray-900/60 to-black/80 border border-gray-700/50 rounded-2xl p-6 backdrop-blur-sm"
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, delay: 0.7 }}
        >
          <h2 className="text-2xl font-bold text-red-400 mb-6 flex items-center">
            <Bug className="w-6 h-6 mr-3" />
            Recent Analysis Results
          </h2>

          <div className="overflow-hidden">
            <table className="w-full">
              <thead>
                <tr className="text-left text-gray-400 text-sm border-b border-gray-700/50">
                  <th className="pb-3 font-medium">Filename</th>
                  <th className="pb-3 font-medium">File Type</th>
                  <th className="pb-3 font-medium">Status</th>
                  <th className="pb-3 font-medium">Threat Score</th>
                  <th className="pb-3 font-medium">Analyzed</th>
                  <th className="pb-3 font-medium">Actions</th>
                </tr>
              </thead>
              <tbody>
                {recentAnalyses.map((analysis, index) => (
                  <motion.tr 
                    key={analysis.id} 
                    className="border-b border-gray-700/30 hover:bg-gray-800/30 transition-colors"
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ duration: 0.5, delay: 0.8 + index * 0.1 }}
                  >
                    <td className="py-4">
                      <div className="flex items-center">
                        <FileText className="w-4 h-4 text-red-400 mr-2" />
                        <span className="text-white font-mono">{analysis.filename}</span>
                      </div>
                    </td>
                    <td className="py-4">
                      <span className="text-gray-300">{analysis.type}</span>
                    </td>
                    <td className="py-4">
                      <span className={`px-3 py-1 rounded-full text-xs font-mono border ${getStatusColor(analysis.status)}`}>
                        {analysis.status}
                      </span>
                    </td>
                    <td className="py-4">
                      <span className={`font-mono text-lg font-bold ${getScoreColor(analysis.score)}`}>
                        {analysis.score}/100
                      </span>
                    </td>
                    <td className="py-4">
                      <span className="text-gray-400 text-sm">{analysis.timestamp}</span>
                    </td>
                    <td className="py-4">
                      <div className="flex items-center space-x-2">
                        <motion.button
                          className="px-3 py-1 bg-blue-600/20 text-blue-400 rounded text-xs font-mono hover:bg-blue-600/30 transition-colors"
                          whileHover={{ scale: 1.05 }}
                        >
                          VIEW
                        </motion.button>
                        <motion.button
                          className="px-3 py-1 bg-green-600/20 text-green-400 rounded text-xs font-mono hover:bg-green-600/30 transition-colors"
                          whileHover={{ scale: 1.05 }}
                        >
                          <Download className="w-3 h-3" />
                        </motion.button>
                      </div>
                    </td>
                  </motion.tr>
                ))}
              </tbody>
            </table>
          </div>
        </motion.div>
      </div>
    </div>
  );
};

export default MalwareAnalysisPage;