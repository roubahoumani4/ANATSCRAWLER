name: Deploy to Production

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Prepare deployment directory
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: 46.165.254.175
          port: 50103
          username: ituu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          use_insecure_cipher: true
          script: |
            DEPLOY_DIR="/var/www/anatscrawler-$(date +%Y%m%d%H%M%S)"
            echo "Creating deployment directory: $DEPLOY_DIR"
            echo 'Klapauciusa12' | sudo -S mkdir -p $DEPLOY_DIR
            echo 'Klapauciusa12' | sudo -S chown ituu:ituu $DEPLOY_DIR
            echo 'Klapauciusa12' | sudo -S chmod 755 $DEPLOY_DIR
            echo "export DEPLOY_DIR=$DEPLOY_DIR" > /tmp/deploy_dir.sh

      - name: Deploy Files
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: 46.165.254.175
          port: 50103
          username: ituu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          use_insecure_cipher: true
          script: |
            source /tmp/deploy_dir.sh
            TEMP_DIR=$(mktemp -d)
            git clone https://github.com/roubahoumani4/ANATSCRAWLER.git $TEMP_DIR
            echo 'Klapauciusa12' | sudo -S cp -r $TEMP_DIR/* $DEPLOY_DIR/
            echo 'Klapauciusa12' | sudo -S cp -r $TEMP_DIR/.* $DEPLOY_DIR/ 2>/dev/null || true
            rm -rf $TEMP_DIR
            echo 'Klapauciusa12' | sudo -S chown -R ituu:ituu $DEPLOY_DIR
            echo 'Klapauciusa12' | sudo -S chmod -R 755 $DEPLOY_DIR

      - name: Configure and Start Application
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: 46.165.254.175
          port: 50103
          username: ituu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          use_insecure_cipher: true
          script: |
            source /tmp/deploy_dir.sh
            cd $DEPLOY_DIR

            # Fix package.json for ES modules
            node -e "
            const pkg = JSON.parse(require('fs').readFileSync('package.json', 'utf8'));
            pkg.type = 'module';
            require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2));
            "

            echo 'Klapauciusa12' | sudo -S chown -R ituu:ituu .
            echo 'Klapauciusa12' | sudo -S chmod -R 755 .

            # Setup environment file
            echo "NODE_ENV=production" > .env
            echo "PORT=5000" >> .env
            echo "HOST=0.0.0.0" >> .env
            echo "ELASTICSEARCH_URL=http://192.168.1.110:9200" >> .env
            echo "MONGODB_URL=mongodb://192.168.1.110:27017/anat_security" >> .env
            echo "REDIS_URL=redis://192.168.1.110:6379" >> .env
            echo "VITE_API_URL=/api" >> .env
            echo "JWT_SECRET=NWagPsTDSNKzcgJQvYouOyTwCbQ0ZTG+zE3/8eTPqQM=" >> .env
            echo "COOKIE_SECRET=NnnQPZ8wazuVR26qNCZ9wRXAdUipV/sE/jC+mKizTXg=" >> .env
            
            echo 'Klapauciusa12' | sudo -S chown ituu:ituu .env
            echo 'Klapauciusa12' | sudo -S chmod 600 .env

            # Install dependencies and build
            npm ci
            echo 'Klapauciusa12' | sudo -S apt-get update
            echo 'Klapauciusa12' | sudo -S apt-get install -y xvfb

            export DISPLAY=:99
            export QT_QPA_PLATFORM=offscreen
            export NODE_ENV=production

            echo 'Klapauciusa12' | sudo -S Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
            sleep 3

            npm run build

            if [ ! -f "dist/index.js" ]; then
              echo "‚ùå Build failed: dist/index.js not found"
              ls -la dist/
              exit 1
            fi

            # Clean up dev dependencies
            npm ci --omit=dev

            # Setup PM2 configuration with proper CommonJS syntax
            echo "module.exports = {" > ecosystem.config.cjs
            echo "  apps: [{" >> ecosystem.config.cjs
            echo "    name: 'anatscrawler'," >> ecosystem.config.cjs
            echo "    script: 'dist/index.js'," >> ecosystem.config.cjs
            echo "    env: {" >> ecosystem.config.cjs
            echo "      NODE_ENV: 'production'," >> ecosystem.config.cjs
            echo "      PORT: '5000'," >> ecosystem.config.cjs
            echo "      HOST: '0.0.0.0'," >> ecosystem.config.cjs
            echo "      TRUST_PROXY: 'true'," >> ecosystem.config.cjs
            echo "      ELASTICSEARCH_URL: 'http://192.168.1.110:9200'," >> ecosystem.config.cjs
            echo "      MONGODB_URL: 'mongodb://192.168.1.110:27017/anat_security'," >> ecosystem.config.cjs
            echo "      REDIS_URL: 'redis://192.168.1.110:6379'," >> ecosystem.config.cjs
            echo "      JWT_SECRET: 'NWagPsTDSNKzcgJQvYouOyTwCbQ0ZTG+zE3/8eTPqQM='," >> ecosystem.config.cjs
            echo "      COOKIE_SECRET: 'NnnQPZ8wazuVR26qNCZ9wRXAdUipV/sE/jC+mKizTXg='" >> ecosystem.config.cjs
            echo "    }," >> ecosystem.config.cjs
            echo "    instances: 1," >> ecosystem.config.cjs
            echo "    exec_mode: 'fork'," >> ecosystem.config.cjs
            echo "    max_memory_restart: '1G'," >> ecosystem.config.cjs
            echo "    watch: false," >> ecosystem.config.cjs
            echo "    error_file: 'logs/err.log'," >> ecosystem.config.cjs
            echo "    out_file: 'logs/out.log'," >> ecosystem.config.cjs
            echo "    merge_logs: true," >> ecosystem.config.cjs
            echo "    log_date_format: 'YYYY-MM-DD HH:mm:ss'," >> ecosystem.config.cjs
            echo "    listen_timeout: 10000," >> ecosystem.config.cjs
            echo "    kill_timeout: 5000" >> ecosystem.config.cjs
            echo "  }]" >> ecosystem.config.cjs
            echo "}" >> ecosystem.config.cjs

            mkdir -p logs
            
            # Stop existing PM2 process
            pm2 delete anatscrawler || true
            
            # Start new application
            pm2 start ecosystem.config.cjs
            
            # Wait for application to start
            sleep 5
            
            # Verify the application is running and listening
            if pm2 show anatscrawler | grep -q "online"; then
              echo "‚úÖ PM2 process is online"
            else
              echo "‚ùå PM2 process failed to start"
              pm2 logs anatscrawler --lines 50
              exit 1
            fi
            
            # Check if port 5000 is listening
            RETRIES=10
            while [ $RETRIES -gt 0 ]; do
              if netstat -tln | grep -q ":5000"; then
                echo "‚úÖ Server is listening on port 5000"
                break
              else
                echo "‚è≥ Waiting for server to start listening on port 5000... ($RETRIES retries left)"
                sleep 2
                RETRIES=$((RETRIES - 1))
              fi
            done
            
            if [ $RETRIES -eq 0 ]; then
              echo "‚ùå Server failed to listen on port 5000"
              echo "PM2 Logs:"
              pm2 logs anatscrawler --lines 50
              echo "Process Status:"
              pm2 show anatscrawler
              exit 1
            fi

            # Update symlink for zero-downtime deployment
            CURRENT_LINK="/var/www/anatscrawler"
            if [ -L "$CURRENT_LINK" ]; then
              sudo rm "$CURRENT_LINK"
            fi
            sudo ln -sf "$DEPLOY_DIR" "$CURRENT_LINK"

            # Move client dist files if needed
            if [ -d "$DEPLOY_DIR/client/dist" ]; then
              echo "Moving client dist files to the correct location..."
              mv $DEPLOY_DIR/client/dist/* $DEPLOY_DIR/client/
              rm -rf $DEPLOY_DIR/client/dist
            fi

            # Clean up old deployments (keep last 5)
            cd /var/www
            ls -1dt anatscrawler-* | tail -n +6 | xargs -r sudo rm -rf
            
            # Save PM2 process list
            pm2 save

            echo "‚úÖ Deployment completed successfully!"
            echo "üìä Current PM2 status:"
            pm2 ls
            echo "üìä Network status:"
            netstat -tln | grep LISTEN
