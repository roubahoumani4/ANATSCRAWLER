name: CI/CD â†’ VM

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Build client
        run: npm run build:client

      - name: Build server
        run: npm run build:server

      - name: Prepare artifacts
        run: |
          mkdir -p out/client/dist
          cp -r dist/* out/ || true
          cp -r client/dist/* out/client/dist/ || true
          cp -r server/dist out/server-dist || true
          cp package.json out/
          cp package-lock.json out/
          cp ecosystem.config.cjs out/
          cp .env.example out/ || true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: out

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: production-build
          path: out

      - name: Sync build artifacts to VM
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          port: ${{ secrets.DEPLOY_PORT }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "out/*"
          target: /var/www/anatscrawler
          rm: true

      - name: Deploy & reload on VM
        uses: appleboy/ssh-action@v1.0.0
        env:
          APP_PORT: ${{ secrets.APP_PORT }}
          ELASTICSEARCH_URL: ${{ secrets.ELASTICSEARCH_URL }}
          MONGODB_URL: ${{ secrets.MONGODB_URL }}
          REDIS_URL: ${{ secrets.REDIS_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          COOKIE_SECRET: ${{ secrets.COOKIE_SECRET }}
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          port: ${{ secrets.DEPLOY_PORT }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            cd /var/www/anatscrawler
            # Move build artifacts up if they are in an 'out' subfolder (including dotfiles)
            if [ -d out ]; then
              shopt -s dotglob
              mv out/* .
              rmdir out
              shopt -u dotglob
            fi
            echo "--- Directory contents after move ---"
            ls -la
            echo "--- Node version ---"
            node -v
            echo "--- NPM version ---"
            npm -v
            echo "--- package.json ---"
            cat package.json
            echo "--- package-lock.json ---"
            cat package-lock.json
            # Install production dependencies only
            npm ci --omit=dev
            # Install Maigret and dependencies for Threat Intelligence feature
            bash scripts/install-maigret.sh
            # Recreate .env
            cat > .env <<EOF
            NODE_ENV=production
            PORT=${APP_PORT}
            HOST=0.0.0.0
            ELASTICSEARCH_URL=${ELASTICSEARCH_URL}
            MONGODB_URL=${MONGODB_URL}
            REDIS_URL=${REDIS_URL}
            VITE_API_URL=/api
            JWT_SECRET=${JWT_SECRET}
            COOKIE_SECRET=${COOKIE_SECRET}
            EOF
            chmod 600 .env
            # Ensure pm2 is available
            if ! command -v pm2 >/dev/null; then
              npm install -g pm2
            fi
            # Reload or start
            pm2 reload ecosystem.config.cjs --env production || pm2 start ecosystem.config.cjs --env production
            # Install extra security dependencies
            npm install csurf
            npm i --save-dev @types/csurf
            npm install cookie-parser
            npm i --save-dev @types/cookie-parser
      - name: Remove deprecated and add secure dependencies
        run: |
          npm uninstall xss-clean
          npm install sanitize-html
          npm i --save-dev @types/sanitize-html
          npm uninstall csurf
