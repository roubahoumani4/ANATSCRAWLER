name: CI/CD → VM

on:
  push:
    branches: [ main ]

jobs:
  # ─── Build on GH Actions ────────────────────────────────────────────────
  build:
    runs-on: ubuntu-latest
    outputs:
      artifact-path: ${{ steps.archive.outputs.path }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Use Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install & build
        run: |
          npm ci
          npm run build:client
          npm run build:server

      - name: Archive build artifacts
        id: archive
        run: |
          mkdir -p out
          cp -r dist out/
          cp -r client/dist out/client-dist
          echo "::set-output name=path::out"
          
      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: production-build
          path: ${{ steps.archive.outputs.path }}

  # ─── Deploy to VM ───────────────────────────────────────────────────────
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: production-build

      - name: Sync to VM via SCP
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          port: ${{ secrets.DEPLOY_PORT }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: |
            out/**
          target: /var/www/anatscrawler

      - name: Reload on VM
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          port: ${{ secrets.DEPLOY_PORT }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            cd /var/www/anatscrawler
            # ensure production deps are present
            npm ci --omit=dev
            # regenerate your .env
            cat > .env <<EOF
            NODE_ENV=production
            PORT=${APP_PORT}
            HOST=0.0.0.0
            ELASTICSEARCH_URL=${ELASTICSEARCH_URL}
            MONGODB_URL=${MONGODB_URL}
            REDIS_URL=${REDIS_URL}
            VITE_API_URL=/api
            JWT_SECRET=${JWT_SECRET}
            COOKIE_SECRET=${COOKIE_SECRET}
            EOF
            chmod 600 .env

            # reload via pm2
            if ! command -v pm2 >/dev/null; then
              npm install -g pm2
            fi
            pm2 reload ecosystem.config.cjs --env production || pm2 start ecosystem.config.cjs --env production
            pm2 save
            