#!/usr/bin/env node

const esbuild = require('esbuild');
const fs = require('fs');
const path = require('path');

// Read package.json to get Node.js built-in modules that should be external
const builtinModules = [
  'assert', 'buffer', 'child_process', 'cluster', 'console', 'constants',
  'crypto', 'dgram', 'dns', 'domain', 'events', 'fs', 'http', 'https',
  'module', 'net', 'os', 'path', 'punycode', 'querystring', 'readline',
  'repl', 'stream', 'string_decoder', 'sys', 'timers', 'tls', 'tty',
  'url', 'util', 'vm', 'zlib', 'async_hooks', 'http2', 'perf_hooks',
  'trace_events', 'worker_threads', 'inspector', 'v8'
];

// Also mark commonly problematic modules as external
const externalModules = [
  ...builtinModules,
  // Binary modules that should not be bundled
  'bufferutil',
  'utf-8-validate',
  'canvas',
  'sharp',
  // Optional dependencies
  'mongodb-client-encryption',
  'kerberos',
  'snappy',
  '@mongodb-js/zstd',
  'bson-ext'
];

async function buildServer() {
  try {
    console.log('üèóÔ∏è  Building server with esbuild...');
    
    await esbuild.build({
      entryPoints: ['server/index.ts'],
      bundle: true,
      platform: 'node',
      target: 'node18',
      format: 'cjs',
      outfile: 'dist/index.js',
      external: externalModules,
      define: {
        'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV || 'production')
      },
      sourcemap: process.env.NODE_ENV !== 'production',
      minify: process.env.NODE_ENV === 'production',
      keepNames: true,
      metafile: true,
      logLevel: 'info',
      banner: {
        js: `
// Server bundle generated by esbuild
// Environment: ${process.env.NODE_ENV || 'production'}
// Build timestamp: ${new Date().toISOString()}
        `.trim()
      }
    });
    
    console.log('‚úÖ Server build completed successfully');
    
    // Verify the output file exists
    if (fs.existsSync('dist/index.js')) {
      const stats = fs.statSync('dist/index.js');
      console.log(`üì¶ Bundle size: ${(stats.size / 1024 / 1024).toFixed(2)} MB`);
    } else {
      throw new Error('Output file dist/index.js was not created');
    }
    
  } catch (error) {
    console.error('‚ùå Build failed:', error);
    process.exit(1);
  }
}

buildServer();
