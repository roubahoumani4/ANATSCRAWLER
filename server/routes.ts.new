import type { Express, Request, Response, NextFunction } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import helmet from "helmet";
import cors from "cors";
import rateLimit from "express-rate-limit";
import xss from "xss-clean";
import mongoSanitize from "express-mongo-sanitize";
import { mongodb } from "./lib/mongodb";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import { body, validationResult } from "express-validator";
import { credentials } from "./mockData";
import { connectDB } from './config/db';
import { registerRoutes as registerSearchRoutes } from './routes/search';

// JWT Secret
const JWT_SECRET = process.env.JWT_SECRET || "ANAT_SECURITY_JWT_SECRET_KEY";

// Token expiration time
const TOKEN_EXPIRATION = "24h";

// MongoDB connection string for user data, authentication, etc.
const MONGODB_URI = process.env.MONGODB_URI || "mongodb://46.165.254.175:50105/anat_security";

// Elasticsearch connection for dark web search only
const ELASTICSEARCH_URI = process.env.ELASTICSEARCH_URI || "http://46.165.254.175:50104";

// Authentication middleware
const authenticate = (req: Request, res: Response, next: NextFunction) => {
  try {
    const authHeader = req.headers.authorization;

    if (!authHeader || !authHeader.startsWith("Bearer ")) {
      return res.status(401).json({ error: "Authentication required" });
    }

    const token = authHeader.split(" ")[1];
    const decoded = jwt.verify(token, JWT_SECRET) as { id: string; username: string };
    req.user = decoded;
    next();
  } catch (error) {
    return res.status(401).json({ error: "Invalid token" });
  }
};

export async function registerRoutes(app: Express): Promise<Server> {
  // Connect to MongoDB
  await connectDB();

  // Register search routes
  registerSearchRoutes(app);

  // Trust proxy for rate limiting
  app.set('trust proxy', 1);

  // Apply security middleware
  app.use(helmet({
    contentSecurityPolicy: {
      directives: {
        defaultSrc: ["'self'"],
        scriptSrc: ["'self'", "'unsafe-inline'", "https://kit.fontawesome.com", "https://cdn.tailwindcss.com"],
        styleSrc: ["'self'", "'unsafe-inline'", "https://fonts.googleapis.com", "https://cdn.tailwindcss.com"],
        imgSrc: ["'self'", "data:", "https://api.qrserver.com", "https://images.unsplash.com"],
        fontSrc: ["'self'", "https://fonts.gstatic.com"],
        connectSrc: [
          "'self'",
          ELASTICSEARCH_URI,
          MONGODB_URI.replace(/^mongodb:\/\//, 'http://'),
          MONGODB_URI.replace(/^mongodb:\/\//, 'https://')
        ]
      }
    },
    xssFilter: true,
    noSniff: true,
    referrerPolicy: { policy: "same-origin" }
  }));

  app.use(cors({
    origin: process.env.CORS_ORIGIN || "http://46.165.254.175:50106",
    credentials: true
  }));

  app.use(xss());
  app.use(mongoSanitize());

  // Rate limiting
  const apiLimiter = rateLimit({
    windowMs: 15 * 60 * 1000, // 15 minutes
    max: 100, // limit each IP to 100 requests per windowMs
    message: { error: "Too many requests, please try again later." }
  });
  app.use("/api", apiLimiter);

  // User registration
  app.post("/api/register", [
    body("username").trim().isLength({ min: 3 }).withMessage("Username must be at least 3 characters"),
    body("email").trim().isEmail().withMessage("Please provide a valid email"),
    body("password").trim().isLength({ min: 6 }).withMessage("Password must be at least 6 characters")
  ], async (req: Request, res: Response) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ error: errors.array()[0].msg });
    }

    try {
      const { username, email, password } = req.body;

      // Check if username or email already exists
      const userExists = credentials.some(user => 
        user.username === username || user.email === email
      );

      if (userExists) {
        return res.status(400).json({ error: "Username or email already exists" });
      }

      // In a real app, we would create a new user in the database
      // const hashedPassword = await bcrypt.hash(password, 10);

      // For this mock implementation, we'll just return success
      res.status(201).json({ message: "User registered successfully" });
    } catch (error) {
      console.error("Registration error:", error);
      res.status(500).json({ error: "Server error" });
    }
  });

  // Edit user
  app.post("/api/edit-user", authenticate, [
    body("username").trim().isLength({ min: 3 }).withMessage("Username must be at least 3 characters"),
    body("email").trim().isEmail().withMessage("Please provide a valid email")
  ], async (req: Request, res: Response) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ error: errors.array()[0].msg });
    }

    try {
      // In a real app, we would update the user in the database
      res.json({ message: "User updated successfully" });
    } catch (error) {
      console.error("Edit user error:", error);
      res.status(500).json({ error: "Server error" });
    }
  });

  // Change password
  app.post("/api/change-password", authenticate, [
    body("currentPassword").trim().notEmpty().withMessage("Current password is required"),
    body("newPassword").trim().isLength({ min: 6 }).withMessage("New password must be at least 6 characters")
  ], async (req: Request, res: Response) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ error: errors.array()[0].msg });
    }

    try {
      // In a real app, we would verify the current password and update with the new one
      res.json({ message: "Password updated successfully" });
    } catch (error) {
      console.error("Change password error:", error);
      res.status(500).json({ error: "Server error" });
    }
  });

  // Get users
  app.get("/api/users", authenticate, async (req: Request, res: Response) => {
    try {
      const result = await mongodb.findUsers();
      if (!result.success || !result.users) {
        throw new Error(result.error || 'Failed to fetch users');
      }
      
      res.json(result.users.map(user => ({
        id: user._id,
        username: user.username,
        fullName: user.fullName || '',
        email: user.email || '',
        organization: user.organization || '',
        department: user.department || '',
        jobPosition: user.jobPosition || ''
      })));
    } catch (error) {
      console.error("Get users error:", error);
      res.status(500).json({ error: "Failed to fetch users" });
    }
  });

  // Start server
  const server = createServer(app);
  const port = process.env.PORT || 5000;
  server.listen(port, () => {
    console.log(`Server running on port ${port}`);
  });

  return server;
}
